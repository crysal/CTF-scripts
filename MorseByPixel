#!/bin/bash
if [ $(command -v convert) ]; then echo "Installed"; else echo "Install imagemagick (using the convert)"; exit 0; fi

Number=$2
input1=$1
while [ $Number -ne 1 ]
do
echo '' > raw_morse
#
#Morse Code Reader
#
BackgroundValue=$(awk "BEGIN {print $(convert $input1 -crop 1x1+0+0 txt:- | tail -1 | awk '{print $4}' | sed 's/srgb(//g' | sed 's/)//g' | sed 's/,/+/g')}")
#getting combined rgb values of background (should be uniqe for each sample)
DotValue=$(awk "BEGIN {print $(convert $input1 -crop 1x1+1+1 txt:- | tail -1 | awk '{print $4}' | sed 's/srgb(//g' | sed 's/)//g' | sed 's/,/+/g')}")
#getting combined rgb values of dots (should be uniqe for each sample)

SizeX=$(file $input1 | awk '{print $5}')
SizeY=$(file $input1 | awk '{print $7}' | sed 's/,//g' )
#when setting cords based on file output remember to -1(minus by one) cause of the offset of convert

CurrentXCord=0
CurrentYCord=0
BlankDecetcor=0 #Counter for blanks in a row, if goes above 1 should change row and put a slash(/)
DotDecetor=0    #Counter for dots and dashes, if goes to 1 then blank goes to 1 put a Dot (.), if goes above 2 then blank goes to 1 put a Dash (-)

while [ $CurrentYCord -lt $SizeY ]
do
CurrentRGBValue=$(awk "BEGIN {print $(convert $input1 -crop 1x1+$CurrentXCord+$CurrentYCord txt:- | tail -1 | awk '{print $4}' | sed 's/srgb(//g' | sed 's/)//g' | sed 's/,/+/g')}")
	if [ $CurrentXCord -eq $(($SizeX-1)) ] #Checks if reached the edge of image, if goes to next line
		then
		CurrentXCord=0
		CurrentYCord=$(($CurrentYCord+1))
		echo "" >> raw_morse
	fi
	if [ $CurrentRGBValue -eq $BackgroundValue ] #Checks if current pixel is a background
		then
		BlankDecetcor=$(($BlankDecetcor+1))
		#Debug echo
		echo -ne "/" >> raw_morse
		#echo "Current value is the same as the background ($CurrentRGBValue = $BackgroundValue)"

		CurrentXCord=$(($CurrentXCord+1)) #move to next pixel
	fi
	if [ $CurrentRGBValue -eq $DotValue ] #Checks if current pixel is a dot
		then
		DotDecetor=$(($DotDecetor+1))
		CurrentXCord=$(($CurrentXCord+1))


		#Debug echo
		#echo "Current value is the same as a dot ($CurrentRGBValue = $DotValue)"
		echo -ne "." >> raw_morse #3 dots in a row = dash
	fi
done
morse=$(cat raw_morse | sed 's/\/\///g' | sed 's/\.\.\./-/g' | sed 's/\///g' | sed ':a;N;$!ba;s/\n/\//g' | sed 's/\/\//++/g' | sed 's/\///g')
echo $morse >> morse

#
#End of Morse Code Reader
#
#Morse Code Translator
#
morse+="++"
pass=$(echo $morse | sed 's/+\.-+/a/g' | \
sed 's/+-\.\.\.+/b/g' | \
sed 's/+-\.-\.+/c/g' | \
sed 's/+-\.\.+/d/g' | \
sed 's/+\.+/e/g' | \
sed 's/+\.\.-\.+/f/g' | \
sed 's/+--\.+/g/g' | \
sed 's/+\.\.\.\.+/h/g' | \
sed 's/+\.\.+/i/g' | \
sed 's/+\.---+/j/g' | \
sed 's/+-\.-+/k/g' | \
sed 's/+\.-\.\.+/l/g' | \
sed 's/+--+/m/g' | \
sed 's/+-\.+/n/g' | \
sed 's/+---+/o/g' | \
sed 's/+\.--\.+/p/g' | \
sed 's/+--\.-+/q/g' | \
sed 's/+\.-\.+/r/g' | \
sed 's/+\.\.\.+/s/g' | \
sed 's/+-+/t/g' | \
sed 's/+\.\.-+/u/g' | \
sed 's/+\.\.\.-+/v/g' | \
sed 's/+\.--+/w/g' | \
sed 's/+-\.\.-+/x/g' | \
sed 's/+-\.--+/y/g' | \
sed 's/+--\.\.+/z/g' | \
sed 's/+\.----+/1/g' | \
sed 's/+\.\.---+/2/g' | \
sed 's/+\.\.\.--+/3/g' | \
sed 's/+\.\.\.\.-+/4/g' | \
sed 's/+\.\.\.\.\.+/5/g' | \
sed 's/+-\.\.\.\.+/6/g' | \
sed 's/+--\.\.\.+/7/g' | \
sed 's/+---\.\.+/8/g' | \
sed 's/+----\.+/9/g' | \
sed 's/+-----+/0/g' | \
sed 's/+//g' )

#
#End of Morse Code Translator, is saved in $pass
#
echo $pass
done
